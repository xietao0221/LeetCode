/*
https://discuss.leetcode.com/topic/24306/elegant-c-solution-o-n-space-time-with-detailed-explanation/2
each number can be and have to be generated by a former number multiplied by 2, 3 or 5
use index2, index3, index5 to save the last ugly number they map
Ex. 0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12
index2 = 8, index3 = 6, index5 = 4
*/
// DP Solution
public class Solution {
    public int nthUglyNumber(int n) {
        // dp[i] means the (i+1)th ugly number, so as the result, we return dp[n - 1]
        int[] dp = new int[n];
        dp[0] = 1;
        
        int index2 = 0, index3 = 0, index5 = 0;
        for(int i = 1; i < n; i++) {
            dp[i] = Math.min(dp[index2] * 2, Math.min(dp[index3] * 3, dp[index5] * 5));
            
            if(dp[i] % 2 == 0) index2++;
            if(dp[i] % 3 == 0) index3++;
            if(dp[i] % 5 == 0) index5++;
        }
        
        return dp[n - 1];
    }
}

// PriorityQueue Solution
/*
public class Solution {
    public int nthUglyNumber(int n) {
        PriorityQueue<Long> queue = new PriorityQueue<>();
        queue.offer((long)1);
        while(n-- > 1) {
            long curr = queue.poll();
            while(!queue.isEmpty() && queue.peek() == curr) queue.poll();
            queue.offer(curr * 2);
            queue.offer(curr * 3);
            queue.offer(curr * 5);
        }
        return queue.poll().intValue();
    }
}
*/